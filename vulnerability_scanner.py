#!/usr/bin/env python3
import os
import json
import subprocess
import platform
import re
import psutil  # NEW: Import psutil to check running processes

# List of known vulnerable software (For demonstration purposes)
KNOWN_VULNERABILITIES = {
    "vuln_package_v1.0": "Critical vulnerability detected! Patch immediately.",
    "log4j": "Apache Log4j vulnerability (CVE-2021-44228) detected.",
    "old_openssl": "OpenSSL outdated version detected (CVE-2022-0778)."
}

def get_running_processes():
    """Retrieves a list of currently running processes."""
    running_processes = []
    for process in psutil.process_iter(attrs=["pid", "name"]):
        running_processes.append(process.info["name"])
    return running_processes

def scan_vulnerabilities(running_processes):
    """Checks running processes for known vulnerabilities."""
    vulnerabilities = []
    for process in running_processes:
        for vuln_name, vuln_info in KNOWN_VULNERABILITIES.items():
            if re.search(vuln_name, process, re.IGNORECASE):
                vulnerabilities.append(f"{process} - {vuln_info}")
    return vulnerabilities

def save_report(vulnerabilities):
    """Saves the vulnerability report as JSON."""
    report = {"Detected Vulnerabilities": vulnerabilities}
    os.makedirs("reports", exist_ok=True)
    report_path = "reports/live_vulnerability_report.json"
    with open(report_path, "w") as file:
        json.dump(report, file, indent=4)
    print(f"Report saved to {report_path}")

def main():
    """Main function to execute the scanner."""
    print("\nüîç Running Live Vulnerability Scanner...\n")

    # Run the vulnerable program to simulate an active vulnerable process
    print("Simulating vulnerable software...")
    os.system("python3 vulnerable_program.py &")  # Run it in the background

    running_processes = get_running_processes()
    vulnerabilities = scan_vulnerabilities(running_processes)

    if vulnerabilities:
        print("\nüö® Vulnerabilities Found:")
        for vuln in vulnerabilities:
            print(f"‚ö†Ô∏è {vuln}")
    else:
        print("\n‚úÖ No known vulnerabilities detected.")

    save_report(vulnerabilities)

if __name__ == "__main__":
    main()
